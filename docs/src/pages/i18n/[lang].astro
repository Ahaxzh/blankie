---
import Layout from "../../layouts/Layout.astro";

// Define types for the language data
interface StringItem {
  source: string;
  target: string;
  state: string;
  comment: string;
}

interface LanguageFile {
  metadata: {
    language: string;
    extractedAt: string;
    sourceFiles: string[];
  };
  statistics: {
    totalStrings: number;
    translatedStrings: number;
    needsReviewStrings: number;
    translationPercentage: number;
    needsReviewPercentage: number;
  };
  strings: Record<string, StringItem>;
}

// In getStaticPaths function
export async function getStaticPaths() {
  const baseUrl = import.meta.env.DEV
    ? "http://localhost:4321" // Dev server port
    : import.meta.env.SITE; // Use Astro's site configuration

  const languagesJsonPath = `${baseUrl}/i18n/languages.json`;

  try {
    const response = await fetch(languagesJsonPath);

    if (!response.ok) {
      // Return a minimal set of common languages if we can't fetch the full list
      console.error(`Failed to fetch languages data: ${response.status}`);
      return [
        "de",
        "es",
        "fr",
        "it",
        "zh-Hans",
        "ja",
        "ko",
        "pt-BR",
        "ru",
        "en-GB",
      ].map((lang) => ({
        params: { lang },
      }));
    }

    const languagesData = await response.json();

    // Create a path for each language
    return Object.keys(languagesData.statistics).map((lang) => ({
      params: { lang },
    }));
  } catch (error) {
    console.error(`Error getting language paths: ${error}`);
    // Fallback to common languages
    return [
      "de",
      "es",
      "fr",
      "it",
      "zh-Hans",
      "ja",
      "ko",
      "pt-BR",
      "ru",
      "en-GB",
    ].map((lang) => ({
      params: { lang },
    }));
  }
}

const { lang } = Astro.params;

// Language names mapping
const languageNames: Record<string, string> = {
  en: "English (Source)",
  de: "German",
  es: "Spanish",
  fr: "French",
  it: "Italian",
  ja: "Japanese",
  ko: "Korean",
  "pt-BR": "Portuguese (Brazil)",
  ru: "Russian",
  "zh-Hans": "Chinese (Simplified)",
  "zh-Hant": "Chinese (Traditional)",
  nl: "Dutch",
  pl: "Polish",
  sv: "Swedish",
  tr: "Turkish",
  uk: "Ukrainian",
  cs: "Czech",
  da: "Danish",
  fi: "Finnish",
  no: "Norwegian",
  ro: "Romanian",
  hu: "Hungarian",
  el: "Greek",
  id: "Indonesian",
  ms: "Malay",
  th: "Thai",
  vi: "Vietnamese",
  ar: "Arabic",
  he: "Hebrew",
  "en-GB": "English (UK)",
  "pt-PT": "Portuguese (Portugal)",
  ca: "Catalan",
  hr: "Croatian",
  sk: "Slovak",
  sl: "Slovenian",
  bg: "Bulgarian",
  et: "Estonian",
  lv: "Latvian",
  lt: "Lithuanian",
};

// Function to calculate combined progress
function getCombinedProgress(stats: LanguageFile["statistics"]): number {
  return stats.translationPercentage + stats.needsReviewPercentage;
}

// Update the fetchLanguageData function
async function fetchLanguageData(lang: string): Promise<LanguageFile | null> {
  try {
    const baseUrl = import.meta.env.DEV
      ? "http://localhost:4321" // Dev server port
      : import.meta.env.SITE; // Use Astro's site configuration

    const langJsonPath = `${baseUrl}/i18n/${lang}.json`;
    console.log("Fetching from:", langJsonPath); // Debug log

    const response = await fetch(langJsonPath);

    if (!response.ok) {
      throw new Error(`Failed to fetch language data: ${response.status}`);
    }

    return (await response.json()) as LanguageFile;
  } catch (error) {
    console.error(`Error fetching language data for ${lang}:`, error);
    return null;
  }
}

const langData = await fetchLanguageData(lang || "");
const langName = lang ? languageNames[lang] || lang : "Unknown Language";
const title = `${langName} Translation Status`;

// Group strings by their state
type GroupedStrings = {
  translated: [string, StringItem][];
  needsReview: [string, StringItem][];
  needsTranslation: [string, StringItem][];
};

const groupedStrings: GroupedStrings = {
  translated: [],
  needsReview: [],
  needsTranslation: [],
};

if (langData?.strings) {
  Object.entries(langData.strings).forEach(([key, item]) => {
    if (item.state === "translated") {
      groupedStrings.translated.push([key, item]);
    } else if (item.state === "needs_review") {
      groupedStrings.needsReview.push([key, item]);
    } else {
      groupedStrings.needsTranslation.push([key, item]);
    }
  });

  // Sort each group alphabetically by the string key
  groupedStrings.translated.sort((a, b) => a[0].localeCompare(b[0]));
  groupedStrings.needsReview.sort((a, b) => a[0].localeCompare(b[0]));
  groupedStrings.needsTranslation.sort((a, b) => a[0].localeCompare(b[0]));
}

function shouldShowSource(key: string, source: string): boolean {
  return key !== source;
}

// Helper function to format a string for display (limit length, handle multiline)
function formatStringForDisplay(str: string, maxLength: number = 100): string {
  if (!str) return "";

  // Replace newlines with spaces
  let formatted = str.replace(/\n/g, " ");

  // Truncate if too long
  if (formatted.length > maxLength) {
    formatted = formatted.substring(0, maxLength) + "...";
  }

  return formatted;
}
---

<Layout title={title}>
  <main class="max-w-6xl mx-auto px-5 pt-28 pb-10">
    <div class="flex items-center mb-6">
      <a
        href="/i18n"
        class="text-yellow-500 hover:text-yellow-400 transition-colors mr-3"
      >
        ‚Üê All Languages
      </a>
      <h1 class="text-4xl font-semibold">{langName} Translation</h1>
    </div>

    {
      !langData && (
        <div class="bg-red-500/30 border border-red-500 rounded-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-2">
            Error Loading Translation Data
          </h2>
          <p>
            We couldn't load the translation data for {langName}. Please try
            again later or
            <a
              href={`/i18n/${lang}.json`}
              class="text-yellow-500 hover:text-yellow-400 underline"
              target="_blank"
            >
              view the raw JSON file
            </a>
            .
          </p>
        </div>
      )
    }

    {
      langData && (
        <>
          {/* Statistics Card */}
          <div class="bg-card rounded-lg p-6 mb-8">
            <h2 class="text-2xl font-semibold mb-4">Translation Overview</h2>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div class="bg-zinc-800/50 rounded-lg p-4">
                <div class="text-2xl font-bold">
                  {langData.statistics.translationPercentage}%
                </div>
                <div class="text-mid-gray">Finalized</div>
                <div class="text-sm text-mid-gray">
                  {langData.statistics.translatedStrings} strings
                </div>
              </div>

              <div class="bg-zinc-800/50 rounded-lg p-4">
                <div class="text-2xl font-bold">
                  {langData.statistics.needsReviewPercentage}%
                </div>
                <div class="text-mid-gray">Needs Review</div>
                <div class="text-sm text-mid-gray">
                  {langData.statistics.needsReviewStrings} strings
                </div>
              </div>

              <div class="bg-zinc-800/50 rounded-lg p-4">
                <div class="text-2xl font-bold">
                  {getCombinedProgress(langData.statistics)}%
                </div>
                <div class="text-mid-gray">Overall Progress</div>
                <div class="text-sm text-mid-gray">
                  {langData.statistics.totalStrings} total strings
                </div>
              </div>
            </div>

            <div class="mb-4">
              <div class="mb-1 text-sm font-medium">Translation Progress</div>
              <div class="w-full bg-black/50 rounded-full h-6 overflow-hidden">
                {/* Progress bars stacked in one container */}
                <div class="flex h-full">
                  <div
                    class="h-full bg-green-500"
                    style={`width: ${langData.statistics.translationPercentage}%`}
                  />
                  <div
                    class="h-full bg-orange-500"
                    style={`width: ${langData.statistics.needsReviewPercentage}%`}
                  />
                </div>
              </div>
              <div class="flex justify-between text-xs mt-1">
                <div class="flex items-center">
                  <span class="w-2 h-2 bg-green-500 inline-block rounded-full mr-1" />
                  <span>Finalized</span>
                </div>
                <div class="flex items-center">
                  <span class="w-2 h-2 bg-orange-500 inline-block rounded-full mr-1" />
                  <span>Needs Review</span>
                </div>
                <div class="flex items-center">
                  <span class="w-2 h-2 bg-red-500 inline-block rounded-full mr-1" />
                  <span>Not Translated</span>
                </div>
              </div>
            </div>

            <div class="text-sm text-mid-gray">
              <p>
                Last updated:{" "}
                {new Date(langData.metadata.extractedAt).toLocaleString()}
              </p>
            </div>
          </div>

          {/* Tabs for different string categories */}
          <div class="mb-8">
            <div class="border-b border-zinc-700">
              <ul class="flex flex-wrap -mb-px" id="tabs" role="tablist">
                {/* Order tabs by count, largest first */}
                {[
                  {
                    id: "translated",
                    label: "Finalized",
                    count: groupedStrings.translated.length,
                    target: "#translated",
                  },
                  {
                    id: "needs-translation",
                    label: "Needs Translation",
                    count: groupedStrings.needsTranslation.length,
                    target: "#needs-translation",
                  },
                  {
                    id: "needs-review",
                    label: "Needs Review",
                    count: groupedStrings.needsReview.length,
                    target: "#needs-review",
                  },
                ]
                  .sort((a, b) => b.count - a.count)
                  .map((tab) => (
                    <li class="mr-2" role="presentation">
                      <button
                        class={`inline-block p-4 border-b-2 rounded-t-lg ${
                          tab.count > 0
                            ? "border-transparent hover:text-gray-300 hover:border-gray-300"
                            : "border-transparent text-gray-500 cursor-not-allowed opacity-50"
                        }`}
                        id={`${tab.id}-tab`}
                        data-tabs-target={tab.target}
                        type="button"
                        role="tab"
                        aria-controls={tab.id}
                        aria-selected="false"
                        disabled={tab.count === 0}
                      >
                        {tab.label}
                        <span class="ml-1 bg-zinc-700 px-2 py-0.5 rounded-full text-xs">
                          {tab.count}
                        </span>
                      </button>
                    </li>
                  ))}
              </ul>
            </div>

            <div id="tab-content">
              {/* Needs Review Tab */}
              <div
                class="block p-4 rounded-lg bg-card mt-4"
                id="needs-review"
                role="tabpanel"
                aria-labelledby="needs-review-tab"
              >
                {groupedStrings.needsReview.length === 0 ? (
                  <p class="text-mid-gray italic">No strings need review.</p>
                ) : (
                  <div class="overflow-x-auto">
                    <table class="w-full text-sm text-left">
                      <thead class="text-xs uppercase bg-zinc-800">
                        <tr>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Source
                          </th>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Translation
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {groupedStrings.needsReview.map(([key, item]) => (
                          <tr class="border-b border-zinc-700">
                            <td class="px-4 py-3 align-top">
                              <div class="font-mono text-yellow-500">{key}</div>
                              {item.comment && (
                                <div class="text-mid-gray text-xs mt-1 italic">
                                  {item.comment}
                                </div>
                              )}
                            </td>
                            <td class="px-4 py-3 align-top font-medium text-orange-300">
                              {formatStringForDisplay(item.target)}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>

              {/* Needs Translation Tab */}
              <div
                class="hidden p-4 rounded-lg bg-card mt-4"
                id="needs-translation"
                role="tabpanel"
                aria-labelledby="needs-translation-tab"
              >
                {groupedStrings.needsTranslation.length === 0 ? (
                  <p class="text-mid-gray italic">
                    All strings have translations.
                  </p>
                ) : (
                  <div class="overflow-x-auto">
                    <table class="w-full text-sm text-left">
                      <thead class="text-xs uppercase bg-zinc-800">
                        <tr>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Source
                          </th>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Translation
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {groupedStrings.needsTranslation.map(([key, item]) => (
                          <tr class="border-b border-zinc-700">
                            <td class="px-4 py-3 align-top">
                              <div class="font-mono text-yellow-500">{key}</div>
                              {item.comment && (
                                <div class="text-mid-gray text-xs mt-1 italic">
                                  {item.comment}
                                </div>
                              )}
                            </td>
                            <td class="px-4 py-3 align-top">
                              {shouldShowSource(key, item.source)
                                ? formatStringForDisplay(item.source)
                                : null}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>

              {/* Translated Tab */}
              <div
                class="hidden p-4 rounded-lg bg-card mt-4"
                id="translated"
                role="tabpanel"
                aria-labelledby="translated-tab"
              >
                {groupedStrings.translated.length === 0 ? (
                  <p class="text-mid-gray italic">
                    No strings have been finalized yet.
                  </p>
                ) : (
                  <div class="overflow-x-auto">
                    <table class="w-full text-sm text-left">
                      <thead class="text-xs uppercase bg-zinc-800">
                        <tr>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Source
                          </th>
                          <th scope="col" class="px-4 py-3 w-1/2">
                            Translation
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {groupedStrings.translated.map(([key, item]) => (
                          <tr class="border-b border-zinc-700">
                            <td class="px-4 py-3 align-top">
                              <div class="font-mono text-yellow-500">{key}</div>
                              {item.comment && (
                                <div class="text-mid-gray text-xs mt-1 italic">
                                  {item.comment}
                                </div>
                              )}
                            </td>
                            <td class="px-4 py-3 align-top text-green-300">
                              {formatStringForDisplay(item.target)}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Footer with actions */}
          <div class="flex flex-col sm:flex-row gap-4 justify-between items-center">
            <a
              href={`/i18n/${lang}.json`}
              target="_blank"
              class="text-yellow-500 hover:text-yellow-400 transition-colors"
            >
              View Raw JSON Data
            </a>

            <a
              href="/contributing"
              class="bg-primary-blue text-white py-2 px-6 rounded-full text-sm font-normal transition-all duration-300 hover:bg-deep-blue no-underline"
            >
              Learn How to Contribute
            </a>
          </div>
        </>
      )
    }
  </main>
</Layout>

<script>
  // Simple tab system
  const tabButtons =
    document.querySelectorAll<HTMLButtonElement>('[role="tab"]');
  const tabPanels = document.querySelectorAll('[role="tabpanel"]');

  function setActiveTab(tabId: string) {
    // Only proceed if the tab is not disabled
    const clickedTab = document.querySelector<HTMLButtonElement>(
      `[data-tabs-target="#${tabId}"]`
    );
    if (clickedTab?.disabled) return;

    // Hide all panels
    tabPanels.forEach((panel) => {
      panel.classList.add("hidden");
      panel.classList.remove("block");
    });

    // Show the selected panel
    const activePanel = document.getElementById(tabId);
    if (activePanel) {
      activePanel.classList.add("block");
      activePanel.classList.remove("hidden");
    }

    // Update tab styles
    tabButtons.forEach((button: HTMLButtonElement) => {
      if (
        button.getAttribute("data-tabs-target") === `#${tabId}` &&
        !button.disabled
      ) {
        button.classList.add("border-yellow-500", "text-yellow-500");
        button.classList.remove(
          "border-transparent",
          "hover:text-gray-300",
          "hover:border-gray-300"
        );
        button.setAttribute("aria-selected", "true");
      } else if (!button.disabled) {
        button.classList.remove("border-yellow-500", "text-yellow-500");
        button.classList.add(
          "border-transparent",
          "hover:text-gray-300",
          "hover:border-gray-300"
        );
        button.setAttribute("aria-selected", "false");
      }
    });
  }

  // Add click handlers to tabs
  tabButtons.forEach((button: HTMLButtonElement) => {
    button.addEventListener("click", () => {
      if (!button.disabled) {
        const targetId = button.getAttribute("data-tabs-target")?.substring(1);
        if (targetId) {
          setActiveTab(targetId);
        }
      }
    });
  });

  // Select the first enabled tab on load
  window.addEventListener("load", () => {
    const firstEnabledTab = Array.from(tabButtons).find(
      (button: HTMLButtonElement) => !button.disabled
    );
    if (firstEnabledTab) {
      const targetId = firstEnabledTab
        .getAttribute("data-tabs-target")
        ?.substring(1);
      if (targetId) {
        setActiveTab(targetId);
      }
    }
  });
</script>
